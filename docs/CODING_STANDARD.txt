# コーディング規約 (V2)

## 1. 全般

*   **言語:** 原則として日本語を使用（コメント、変数名など）。ただし、広く一般的に使われる英語の技術用語はそのまま使用する。
*   **文字コード:** UTF-8
*   **改行コード:** LF (Gitの設定で `core.autocrlf` を適切に設定推奨)
*   **インデント:** 半角スペース 2つ
*   **コメント:** コードの意図が自明でない箇所や、複雑なロジックには積極的にコメントを追加する。`//` または `/* ... */` を使用。

## 2. JavaScript (Google Apps Script含む)

*   **命名規則:**
    *   変数・関数: `camelCase` (例: `userName`, `calculateTotal`)
    *   定数: `UPPER_SNAKE_CASE` (例: `SPREADSHEET_ID`, `MAX_RECORDS`)
    *   クラス: `PascalCase` (例: `UserData`, `SpreadsheetManager`)
*   **記述スタイル:**
    *   セミコロン (`;`) は行末に必ずつける。
    *   適切な空白（演算子の前後、カンマの後など）を入れて可読性を高める。
    *   `const` を優先して使用し、再代入が必要な場合のみ `let` を使用する。`var` は使用しない。
    *   アロー関数 (`=>`) を適宜活用する。
    *   文字列はシングルクォート (`'`) またはダブルクォート (`"`) で統一する（プロジェクト内で決める。例: シングルクォート優先）。テンプレートリテラル (`) は変数埋め込み時に使用。
*   **エラーハンドリング:** `try...catch` を適切に使用し、エラー発生時には `Logger.log` で詳細な情報を記録する。ユーザー向けのエラーメッセージは別途制御する。
*   **ログ:** `Logger.log` を活用し、処理の開始・終了、重要な変数の値、エラー情報などを記録する。ログレベル（DEBUG, INFO, WARN, ERRORなど）を意識したメッセージにする（例: `[ERROR] Failed to save record: ...`）。

## 3. HTML

*   **記述スタイル:**
    *   インデントを正しく行い、親子関係を明確にする。
    *   タグ、属性名は小文字で記述する。
    *   属性値はダブルクォート (`"`) で囲む。
    *   適切な `id` と `class` を付与する。
*   **命名規則:**
    *   `id`: 原則として `camelCase` または `kebab-case` (例: `userNameInput`, `submit-button`) で、ページ内で一意にする。
    *   `class`: CSSの命名規則に従う（本文書 4. CSS を参照）。

## 4. CSS

*   **命名規則:**
    *   **BEM (Block Element Modifier)** を基本とする。
        *   Block: コンポーネントのルート (例: `.form-group`, `.btn`, `.user-profile`)
        *   Element: Blockを構成する要素 (例: `.form-group__label`, `.btn__icon`)
        *   Modifier: BlockまたはElementの状態やバリエーション (例: `.btn--primary`, `.form-group--error`)
    *   命名は英語の小文字、単語間はハイフン (`-`) で接続する（BEMの区切り文字 `__` や `--` を除く）。
*   **記述スタイル:**
    *   インデントを正しく行う。
    *   セレクタと `{` の間にスペースを入れる。
    *   各プロパティ宣言の `:` の後にスペースを入れ、行末にセミコロン (`;`) をつける。
    *   プロパティは意味のある順序で記述する（例: 位置 -> サイズ -> マージン/パディング -> 背景/ボーダー -> テキスト -> その他）。
    *   ゼロ値の場合、単位 (`px`, `%` など) は省略する（例: `margin: 0;`）。
    *   16進数カラーコードは小文字で記述し、可能な場合は短縮形を使用する（例: `#fff`）。
*   **コメント:** 必要に応じて `/* ... */` で説明を追加する。