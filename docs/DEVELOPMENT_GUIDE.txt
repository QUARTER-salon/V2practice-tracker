# 美容師練習管理Webアプリ V2 開発・運用ガイド (ローカル開発環境版)

## 1. はじめに：このガイドの目的

このガイドは、「美容師練習管理Webアプリ V2」（以下、本アプリ）の開発を、ローカル開発環境（VS Code, Git, clasp）を使用して効率的かつ安全に進めるための手順を説明するものです。

本ガイドでは、ローカルでのコード編集、Gitによるバージョン管理、clasp を用いた Google Apps Script (GAS) プロジェクトとの連携、そしてテスト・デプロイまでの標準的なフローを示します。デバイドアンドコンカー（分割統治）のアプローチに基づき、機能単位での開発を推奨します。

## 2. 開発環境

*   **コードエディタ:** Visual Studio Code (VS Code) - 拡張機能 (Prettier, ESLint など推奨)
*   **バージョン管理:** Git, GitHub (推奨: プロジェクト用のリモートリポジトリを作成)
*   **GAS連携ツール:** clasp v2.4.2 (`npm install -g @google/clasp@2.4.2` で特定バージョンをインストール推奨 ※最新版で `clasp open` 不具合報告あり)
*   **実行環境:** Node.js (clasp の実行に必要)
*   **Webブラウザ:** Google Chrome推奨 (動作確認、デバッグ、GASエディタ補助利用)
*   **Googleアカウント:** 開発権限のあるGoogle Workspaceアカウント (例: yujiro-funabashi@4uwb.com)
*   **Google Drive:** GASプロジェクトファイルの実体保管場所
*   **Google スプレッドシート:** アプリのデータベース（スタッフマスター、練習記録、在庫、各種マスター）。テスト用と本番用を区別して準備。

## 3. 開発プロジェクトの準備 (V2テスト環境)

安全な開発のため、必ずテスト用の環境を用意し、そこで開発・テストを行ってから本番環境に反映させます。

### 3.1 スプレッドシートの準備

1.  **テスト用スプレッドシート作成:** 本番運用で使用するスプレッドシートとは別に、**テスト専用**のGoogleスプレッドシートファイルを作成します。（例: `[V2テスト用]美容師練習管理データ`）
2.  **シート作成:** `docs/REQUIREMENTS.txt` の「3. システム構成」に基づき、必要なシート（スタッフマスター, アプリ練習記録_RAW, ウィッグ在庫, 各種マスター）を作成し、ヘッダー行やテスト用のダミーデータを入力します。
3.  **ID控える:** 作成した**テスト用スプレッドシートのID**（URLの `/d/` と `/edit` の間の文字列）を控えておきます。
4.  **権限設定:** アプリにアクセスする可能性のある全てのGoogleアカウントが、**テスト用スプレッドシートに対して「編集者」権限を持っている**ことを確認してください。
5.  **本番用準備(将来):** 同様に、本番用のスプレッドシートも準備し、IDを控えておきます。

### 3.2 ローカル開発環境セットアップ

1.  **ローカル開発フォルダ作成:** ローカルPCに **`V2テスト練習アプリ`** という名前のフォルダを作成し、VS Codeで開きます。
2.  **Git初期化:** ターミナルで `V2テスト練習アプリ` フォルダに移動し、`git init` を実行します。
3.  **テスト用GASプロジェクト作成:** Google Apps Script ダッシュボードで新しいGASプロジェクトを作成（例: `V2テスト練習アプリGAS`）し、その**スクリプトID**を控えます。
4.  **claspログイン:** ターミナルで `clasp login` を実行し、Googleアカウントに接続します。
5.  **GASプロジェクトと紐付け:** ターミナルで `clasp clone 【テスト用GASスクリプトID】 --rootDir ./src` を実行します。これにより `.clasp.json` と `src` フォルダが作成されます。
6.  **.gitignore設定:** `V2テスト練習アプリ` フォルダ直下に `.gitignore` ファイルを作成し、以下を記述します。
    ```gitignore
    # clasp 設定ファイル (環境依存)
    .clasp.json

    # Node.js モジュール (もし使う場合)
    node_modules/

    # OS 生成ファイル
    .DS_Store
    Thumbs.db

    # VS Code 設定
    .vscode/
    ```
7.  **appsscript.json設定:** `src/appsscript.json` を開き、`timeZone`, `webapp`, `oauthScopes` などが `docs/REQUIREMENTS.txt` や本ガイドの推奨設定と一致しているか確認・修正します。**特に `webapp.executeAs` は `"USER_ACCESSING"` になっているか確認してください。**
8.  **code.js設定:** `src/code.js` を作成または開き、`IS_PRODUCTION = false` とし、控えておいた **`TEST_SPREADSHEET_ID`** を設定します。各種シート名の定数も定義します。基本的な `doGet`, `include` 関数も記述します。
9.  **初期Push:** ターミナルで `clasp push` を実行し、ローカルの `code.js` と `appsscript.json` がGASプロジェクトに反映されることを確認します。
10. **初期コミット:** `git add .` と `git commit -m "Initial setup for V2 project"` を実行し、ここまでの状態をGitに記録します。

### 3.3 リモートリポジトリ (GitHub等) の準備 (任意だが推奨)

1.  GitHub等で、本プロジェクト用のリモートリポジトリ（例: `V2-Practice-App-Test`, Private推奨）を**空の状態で**作成します。
2.  ローカルリポジトリとリモートリポジトリを接続します。
    ```bash
    # git remote add origin https://github.com/your-username/repository-name.git
    # git branch -M main
    # git push -u origin main
    ```

## 4. 開発の進め方（計画）

デバイドアンドコンカー方式に基づき、以下のステップで機能実装を進めます。コード編集は **VS Code**、バージョン管理は **Git**、GASプロジェクトへの反映は **`clasp push`**、テスト導入はGASエディタまたは `clasp deploy`、最終的なデプロイは **`clasp deploy`** で行います。

### **【進捗：完了】Step 0: プロジェクト初期セットアップ**

*   **目的:** V2プロジェクトの開発基盤を構築。
*   **実施内容:** 本ガイドの「3. 開発プロジェクトの準備」に記載の作業を実施。ローカル開発環境、Gitリポジトリ、テスト用GASプロジェクト、基本設定ファイル（`.gitignore`, `.clasp.json`, `appsscript.json`, `code.js`）、ドキュメントフォルダ構造の準備が完了。
*   **状況:** 共通基盤の実装を開始できる状態。

### **【進捗：計画中】Step 1: 共通基盤の実装とテスト**

*   **目的:** アプリ全体で利用する共通関数、スタイル、クライアントサイドJSを実装・テストする。
*   **対象ファイル:** `src/Utils.js`, `src/styles.html`, `src/script.html` など。
*   **作業内容:**
    1.  `Utils.js` に共通GAS関数（例: `checkAdminAccess`, `isAdmin`, `logMessage` など）を実装・テスト (`clasp run` 等)。
    2.  `styles.html` に基本的なCSSスタイル、共通クラスを定義。
    3.  `script.html` に共通クライアントサイドJS関数（例: `showMessage`, `formatDate`, `handleError` など）を実装。
    4.  `code.js` の `doGet` で簡単なHTMLページ（例: `index.html` の骨組み）を返し、`include('styles')` と `include('script')` が機能するか確認。
*   **ドキュメント:** `docs/specs/00_common_spec.txt`, `docs/dev/00_common_dev.txt` を記述・更新。

### **【進捗：計画中】Step 2: 認証機能の実装とテスト**

*   **目的:** ログイン、ログアウト、セッション管理機能を実装・テストする。
*   **対象ファイル:** `src/Auth.js`, `src/index.html`, `src/script.html` (ログイン用JS), `src/code.js` (doGetの認証連携部分) など。
*   **作業内容:**
    1.  `Auth.js` に認証関連のGAS関数 (`checkSession`, `setSession`, `logout`, `loginWithGoogle` 等）を実装・テスト。
    2.  `index.html` にログイン画面のHTMLを実装。
    3.  `script.html` または専用の `login_script.html` にログイン処理のクライアントサイドJSを実装。
    4.  `code.js` の `doGet` でログイン状態を判定し、`index.html` または `app.html` へ振り分けるロジックを実装。
*   **ドキュメント:** `docs/specs/01_auth_spec.txt`, `docs/dev/01_auth_dev.txt`, `docs/API_SPEC.txt` (関連API) を記述・更新。

### **【進捗：計画中】Step 3: 練習記録機能の実装とテスト**

*   **目的:** 練習記録入力画面（ユーザー向け）を実装・テストする。
*   **対象ファイル:** `src/DataAccess.js`, `src/Auth.js` (データ取得関数), `src/app.html`, `src/app_script.html` など。
*   **作業内容:**
    1.  `Auth.js` に練習記録画面で必要なデータ取得関数 (`getTrainers`, `getTechCategories`, `getTechDetails`) を実装・テスト。
    2.  `DataAccess.js` に練習記録保存・バリデーション関数 (`savePracticeRecord`, `validatePracticeRecord`, `updateWigInventoryOnRecord`) を実装・テスト。
    3.  `app.html` に練習記録画面のHTMLを実装。
    4.  `app_script.html` にデータ取得、動的項目制御、フォーム送信処理のクライアントサイドJSを実装。
*   **ドキュメント:** `docs/specs/02_record_spec.txt`, `docs/dev/02_record_dev.txt`, `docs/API_SPEC.txt` (関連API) を記述・更新。

### **【進捗：計画中】Step 4: 管理者機能（マスター管理）の実装とテスト**

*   **目的:** 管理者向けのマスターデータ管理画面を実装・テストする。
*   **対象ファイル:** `src/AdminHandler.js`, `src/admin.html`, `src/admin_script.html` など。
*   **作業内容:**
    1.  `AdminHandler.js` に各マスターのCRUD操作を行うGAS関数を実装・テスト。
    2.  `admin.html` に管理者画面のHTML（タブ構造、フォーム、リスト）を実装。
    3.  `admin_script.html` にタブ制御、データロード・表示、CRUD操作のクライアントサイドJSを実装。
*   **ドキュメント:** `docs/specs/03_admin_master_spec.txt`, `docs/dev/03_admin_master_dev.txt`, `docs/API_SPEC.txt` (関連API) を記述・更新。

### **【進捗：計画中】Step 5: 管理者機能（在庫管理）の実装とテスト**

*   **目的:** 管理者向けの在庫管理画面を実装・テストする。
*   **対象ファイル:** `src/DataAccess.js` (在庫取得), `src/AdminHandler.js` (在庫更新), `src/admin.html`, `src/admin_script.html` など。
*   **作業内容:**
    1.  `DataAccess.js` に在庫取得関数 (`getWigInventory`) を実装・テスト。
    2.  `AdminHandler.js` に在庫手動更新関数 (`updateWigStock`) を実装・テスト。
    3.  `admin.html` の在庫管理タブ部分のHTMLを実装。
    4.  `admin_script.html` の在庫管理タブ関連のクライアントサイドJSを実装。
*   **ドキュメント:** `docs/specs/04_admin_inventory_spec.txt`, `docs/dev/04_admin_inventory_dev.txt`, `docs/API_SPEC.txt` (関連API) を記述・更新。

### **【進捗：計画中】Step 6: UI/UX 調整とエラーハンドリング強化**

*   **目的:** スマートフォンでの使いやすさ向上、エラー発生時のユーザー体験と開発者のデバッグ効率向上。
*   **作業内容:** 全体のレスポンシブ対応 (`styles.html`)、エラーハンドリング見直し、入力バリデーション強化など。

### **【進捗：計画中】Step 7: コードレビューとリファクタリング**

*   **目的:** 実装したコード全体を見直し、品質、可読性、保守性をさらに向上させる。
*   **作業内容:** 自己レビュー、コード整理、冗長なコードの共通化など。

### **【進捗：計画中】Step 8: 本番デプロイ準備と実施**

*   **目的:** テスト済みのアプリケーションを本番環境で利用可能にする。
*   **作業内容:** 本番環境準備、`IS_PRODUCTION` フラグ切り替え、本番GASプロジェクトへのPush、`clasp deploy` による本番デプロイ。

### **【進捗：計画中】Step 9: 運用と保守**

*   **目的:** アプリケーションの安定稼働を維持し、必要に応じて改善を行う。
*   **作業内容:** ユーザー展開、フィードバック収集、保守サイクル（ローカル開発 -> テスト環境 -> 本番環境）の実行。

## 5. テスト方法詳細

### 5.1 GAS関数の単体テスト

*   **方法1 (推奨):** ローカルのターミナルで `clasp run <関数名>` を実行。
    *   引数が必要な場合は、GASエディタのデバッグ機能を使うか、テスト用のラッパー関数を作成して `clasp run` で呼び出す。
    *   `console.log` は表示されないため、`Logger.log` を使い、GASエディタの実行ログで確認。
*   **方法2:** `clasp open` でブラウザエディタを開き、関数を選択して [デバッグ] または [実行]。`Logger.log` で確認。

### 5.2 Webアプリ結合テスト

*   **テスト導入URL:** `clasp push` 後、`clasp open` でGASエディタを開き、[デプロイ] > [テスト導入] で開発用URLを取得。このURLをブラウザで開き、動作確認を行う。
*   **フロントエンドデバッグ:** Chrome 開発者ツール ([検証] > [Console], [Network], [Application] タブ) を活用する。`console.log` やブレークポイントを使う。`google.script.run` の呼び出しと応答は [Network] タブで確認可能。

### 5.3 総合テスト

*   PCブラウザだけでなく、**スマートフォン実機** のブラウザでもテスト導入URLを開き、表示崩れや操作性を確認する。

## 6. デプロイ方法詳細

### 6.1 初回デプロイ (本番用)

1.  `src/code.js` の `IS_PRODUCTION` を `true` に変更。
2.  `.clasp.json` の `scriptId` を **本番用GASプロジェクトID** に変更（または本番用ブランチで管理）。
3.  `clasp push` で本番GASプロジェクトにコードを反映。
4.  `clasp deploy -V 1 -d "Initial production deployment"` を実行。
5.  表示される **Web アプリ URL** をユーザーに共有。

### 6.2 更新デプロイ (本番用)

1.  `clasp deployments` で最新のデプロイメントIDを確認。
2.  `clasp deploy -i <デプロイメントID> -d "今回の更新内容の説明"` を実行。

### 6.3 デプロイバージョンの管理

*   `clasp deploy` を実行すると、GASプロジェクトに新しいバージョンが自動的に作成される。
*   ブラウザエディタの [デプロイ] > [デプロイメントを管理] から履歴を確認可能。
*   Gitのタグ機能 (例: `git tag v1.0.0`) と連携させると管理しやすい。

## 7. バージョン管理 (Git)

*   **必須:** 全てのコード変更はGitで管理します。
*   **ブランチ戦略 (例):**
    *   `main`: 本番反映用ブランチ。安定版のみマージ。
    *   `develop`: 開発の主軸となるブランチ。機能ブランチからマージ。
    *   `feature/xxx`: 各機能開発用のブランチ。`develop` から分岐し、完了後に `develop` へPull Request (推奨)。
*   **コミット:** 意味のある単位で `git commit -m " meaningful message"` をこまめに行う。
*   **リモートリポジトリ:** GitHub等に `git push` してバックアップと共有を行う。

## 8. 注意事項

*   **`.clasp.json`:** Script ID を含むため、`.gitignore` で管理対象外とし、環境ごとに設定する。
*   **`.claspignore`:** 不要なファイル (例: `docs/`) が Push されないように設定する。ルートディレクトリに `.claspignore` ファイルを作成し、無視したいフォルダやファイルを記述 (例: `docs/**`)。
*   **`appsscript.json`:** ローカルで管理し `clasp push` で反映させる。OAuthスコープ変更時は注意。
*   **環境変数:** スプレッドシートID等は `code.js` でフラグ管理。機密情報はコードに直接書かない（GASのプロパティストア等を利用検討）。
*   **Node.js/claspバージョン:** 開発者間でバージョンを揃えることが望ましい。

## 9. 開発支援 (AI アシスタントの活用)

このプロジェクトでは、開発効率の向上と問題解決の迅速化を目的として、AIアシスタント（大規模言語モデル、LLM）を積極的に活用しています。AIアシスタントには、主に以下の役割を期待しています。

**AIアシスタントの主な役割:**

1.  **コード分析とデバッグ支援:**
    *   提供されたコードスニペットやファイル全体の構造を分析し、潜在的な問題点や改善点を指摘する。
    *   エラーメッセージや実行ログに基づき、エラーの原因を特定し、解決策の候補を提案する。
2.  **コード生成とリファクタリング:**
    *   具体的な要件や指示に基づき、新しい機能や修正のためのコード（HTML, CSS, JavaScript, Google Apps Script）を生成・提案する。
    *   既存のコードを、可読性、保守性、パフォーマンスの観点から改善（リファクタリング）する案を提示する。
3.  **開発プロセスのナビゲーション:**
    *   Gitによるバージョン管理（コミットメッセージの提案、コマンド例の提示など）。
    *   `clasp` を用いたGASプロジェクトとの連携（`push`, `deploy` などのコマンド例と説明）。
    *   テストやデプロイの手順に関するガイダンス。
4.  **ドキュメント作成・更新支援:**
    *   README、要件定義書、開発ガイドなどのドキュメント内容の提案、修正、校正を行う。
    *   コメントの追加や変更履歴の記述を支援する。
5.  **次のステップと戦略提案:**
    *   プロジェクトの現在の状況（コード、進捗、課題）を理解し、次に進めるべき開発ステップや、問題解決のための戦略的なアプローチを複数提案する。
6.  **技術的な知識提供と壁打ち:**
    *   GAS、JavaScript、HTML/CSS、API連携、認証など、関連技術に関する質問に回答し、概念や実装方法を解説する。
    *   実装方針やアイデアに対するフィードバックを提供し、思考整理を助ける（壁打ち相手）。

**効果的なAIアシスタントの活用方法:**

*   **明確なコンテキストの提供:** コードの該当箇所、エラーメッセージ全文、関連するログ、実現したいこと、現在の問題点などを具体的に伝える。
*   **段階的な依頼:** 一度に多くのことを依頼せず、タスクを分割して具体的に指示する。
*   **フィードバックの提供:** AIの提案が期待通りでなかった場合、どの点が違ったのか、どう修正してほしいのかを具体的にフィードバックする。
*   **対話履歴の活用:** 必要に応じて過去のやり取りを提示し、文脈を思い出させる。

**留意事項:**

*   **最終判断は開発者:** AIアシスタントは強力なツールですが、提案されたコードや情報は必ず開発者自身がレビューし、その正確性、安全性、適切性を判断・保証する必要があります。
*   **思考停止の回避:** AIの提案を鵜呑みにせず、なぜその提案がなされたのかを理解し、自身の知識・経験と照らし合わせて採用・修正・却下を判断することが重要です。
*   **機密情報の管理:** パスワード、APIキー、個人情報などの機密データは、AIアシスタントとのやり取りに含めないように最大限注意してください。