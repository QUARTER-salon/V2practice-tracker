# 美容師練習管理Webアプリ 要件定義書

## 1. 概要

本ドキュメントは、現在Googleフォームで運用されている美容師の練習記録管理を、より効率的かつ柔軟に行うためのWebアプリケーション（以下、本アプリ）の要件を定義するものである。本アプリは、ログイン機能による入力者特定、練習内容の記録（詳細技術項目は1記録につき1項目）、ウィッグ在庫の簡易管理、およびデータの集計・分析の基盤となるデータの収集を目的とする。データは既存のGoogleフォーム回答とは別の新しいGoogleスプレッドシートシートに出力する。

## 2. 背景と目的

### 背景

*   現在、Googleフォームを利用して複数店舗（4店舗）のアシスタントの練習記録を管理している。
*   データはGoogleスプレッドシートに集約されている。
*   練習記録時、毎回名前や店舗を選択する必要があり、入力に手間がかかっている。
*   現状のフォームでは、詳細技術項目を複数選択できないため、複数項目練習した場合に複数回入力する必要がある。（※アプリでもこの運用を踏襲）
*   練習に複数のトレーナーが関与する場合があるが、既存の集計・分析への影響を最小限に抑えつつ記録する必要がある。
*   選択肢に応じた項目の動的表示、選択肢の管理、ウィッグ使用状況の管理などに課題があり、より使い勝手の良いシステムが求められている。
*   スタッフ情報は別途スプレッドシート（スタッフマスターシート）で管理されている。
*   将来的にはスタイリストの練習管理への拡張も視野に入れている。

### 目的

*   ログイン機能を提供し、記録者（スタッフ）を特定することで、名前・役職・店舗などの入力を自動化し、入力負荷を大幅に軽減する。
*   スタッフマスターシートの情報を活用し、ログインユーザーに応じた情報を自動表示する。
*   店舗、役職、技術カテゴリーに応じて入力項目を動的に変化させ、入力効率を向上させる。
*   一度の記録では一つの詳細技術項目のみを記録する運用を維持しつつ、アプリでの入力を簡便化する。
*   複数トレーナーが関与した場合、代表者1名を選択し、他はメモとして記録することで、既存のデータ分析への影響を抑える。
*   新品ウィッグの使用数を記録し、店舗ごとの在庫数を簡易的に管理する。
*   店舗、トレーナー、練習項目などのマスターデータをアプリ上で管理可能にする（スタッフ情報はマスターシート参照を基本とする）。
*   スマートフォンからの入力操作性を向上させる。
*   収集したデータを、保守性・拡張性を考慮した形で新しいGoogleスプレッドシートシートに出力する。

## 3. システム構成

*   **フロントエンド:** Webブラウザ (HTML, CSS, JavaScript)
*   **バックエンド:** Google Apps Script
*   **データベース:** Google スプレッドシート
    *   スタッフマスター (`STAFF_MASTER_SHEET_NAME`)
    *   練習記録 (`PRACTICE_RECORD_SHEET_NAME`)
    *   ウィッグ在庫 (`INVENTORY_SHEET_NAME`)
    *   店舗マスター (`STORE_MASTER_SHEET_NAME`)
    *   役職マスター (`ROLE_MASTER_SHEET_NAME`)
    *   トレーナーマスター (`TRAINER_MASTER_SHEET_NAME`)
    *   技術カテゴリーマスター (`TECH_CATEGORY_SHEET_NAME`)
    *   詳細技術項目マスター (`TECH_DETAIL_SHEET_NAME`)
    *(シート名は `code.js` で定義)*

## 4. 機能要件概要

各機能の詳細な仕様は、`docs/specs/` ディレクトリ内の対応する詳細仕様書を参照すること。

### 4.1 認証機能 (`docs/specs/01_auth_spec.txt` 参照)

*   **4.1.1 ユーザー認証:** Googleアカウント認証またはID/パスワード認証によるログイン。
*   **4.1.2 ユーザー情報取得:** ログイン時にスタッフマスターからユーザー情報を取得・保持。
*   **4.1.3 ログアウト機能:** セッションを破棄し、ログイン画面に戻る。
*   **4.1.4 管理者判定:** ログインユーザーが管理者権限を持つか判定。

### 4.2 練習記録機能 (`docs/specs/02_record_spec.txt` 参照)

*   **4.2.1 ユーザー情報表示:** ログインユーザーの店舗、役職、名前を自動表示。
*   **4.2.2 練習記録入力:** トレーナー、練習日、時間、技術カテゴリ、詳細技術項目（単一）、練習回数、ウィッグ使用数、評価、その他詳細を入力。
*   **4.2.3 動的項目制御:** ログインユーザーの役職や選択内容に応じて、表示される選択肢（技術カテゴリ、詳細項目）や入力欄（評価）を動的に制御。
*   **4.2.4 データ保存:** 入力内容をバリデーションし、練習記録シートに保存。
*   **4.2.5 在庫連携:** 新品ウィッグ使用数に基づき、ウィッグ在庫シートを更新。

### 4.3 管理者機能: マスター管理 (`docs/specs/03_admin_master_spec.txt` 参照)

*   **4.3.1 管理者認証:** 管理者権限を持つユーザーのみアクセス可能。
*   **4.3.2 各マスター管理:** 店舗、役職、トレーナー、技術カテゴリー、詳細技術項目のCRUD (Create, Read, Update, Delete) 操作。
*   **4.3.3 データ連携:** マスターデータの変更が関連する他のマスターデータや練習記録時の選択肢に反映されること（例: 店舗名変更→トレーナーマスターの店舗名も更新）。

### 4.4 管理者機能: 在庫管理 (`docs/specs/04_admin_inventory_spec.txt` 参照)

*   **4.4.1 在庫一覧表示:** 店舗ごとのウィッグ在庫数を表示。
*   **4.4.2 在庫手動更新:** 棚卸し結果などを反映するため、店舗を指定して在庫数を手動で更新。

## 5. データ要件

### 5.1 参照データ: スタッフマスターシート (`STAFF_MASTER_SHEET_NAME`)

Google スプレッドシートで管理。アプリからは原則読み取り。

*   **必須列:**
    *   社員番号 (一意のID)
    *   名前
    *   Role (役職)
    *   店舗
    *   メールアドレス (Google認証時)
    *   (任意) パスワードハッシュ (ID/PW認証時)
    *   (任意) 管理者フラグ (管理者判定用)

### 5.2 記録データ: 練習記録シート (`PRACTICE_RECORD_SHEET_NAME`)

アプリから書き込まれるデータ項目。

*   記録日時 (自動)
*   店舗 (自動)
*   役職 (自動)
*   名前 (自動)
*   社員番号 (自動)
*   トレーナー (選択)
*   練習日 (入力)
*   練習時間 (選択)
*   技術カテゴリー (選択)
*   詳細技術項目 (選択)
*   練習回数 (選択)
*   新品ウィッグ使用数 (選択, デフォルト0)
*   評価 (選択, 1-10, 自主練時は空)
*   その他詳細 (入力)
*   (任意) アプリバージョン (自動)

### 5.3 管理データ: ウィッグ在庫シート (`INVENTORY_SHEET_NAME`)

*   店舗名
*   在庫数

### 5.4 管理データ: 各種マスターシート

以下のマスターシートが存在し、管理者機能で管理される。詳細は各機能仕様書を参照。

*   店舗マスター (`STORE_MASTER_SHEET_NAME`)
*   役職マスター (`ROLE_MASTER_SHEET_NAME`)
*   トレーナーマスター (`TRAINER_MASTER_SHEET_NAME`)
*   技術カテゴリーマスター (`TECH_CATEGORY_SHEET_NAME`)
*   詳細技術項目マスター (`TECH_DETAIL_SHEET_NAME`)

## 6. 非機能要件

*   **6.1 UI/UX:** スマートフォンでの操作性、PCでの利用、レスポンシブ対応。
*   **6.2 パフォーマンス:** ストレスのない画面表示、非同期処理の考慮。
*   **6.3 セキュリティ:** 認証、認可（管理者）、入力値検証、パスワードハッシュ化（ID/PW時）、基本的なWebセキュリティ対策。
*   **6.4 保守性・拡張性:** 可読性、モジュール性、再利用性、柔軟性を考慮した設計。詳細は `docs/CODING_STANDARD.txt` および `docs/DEVELOPMENT_GUIDE.txt` を参照。
*   **6.5 テスト容易性:** 単体テストや結合テストが実施しやすい設計。
*   **6.6 エラーハンドリング:** 適切なユーザーメッセージ表示と開発者向けログ出力。

## 7. 画面イメージ

各画面（ログイン、練習記録、管理者）の具体的な画面イメージ（ワイヤーフレーム）は、対応する機能の詳細仕様書 (`docs/specs/xx_*.txt`) を参照すること。

## 8. 開発上の考慮事項・制約事項

*   **コーディング規約:** `docs/CODING_STANDARD.txt` を参照し、遵守すること。
*   **バージョン管理:** `docs/DEVELOPMENT_GUIDE.txt` に従い、Gitを使用すること。
*   **ドキュメント:** 本ドキュメントおよび関連ドキュメントを適切に更新すること。
*   **データ出力先:** 練習記録は新規シート (`PRACTICE_RECORD_SHEET_NAME`) に出力する。
*   **入力運用:** 詳細技術項目は1記録1項目、複数トレーナー時は代表1名選択＋メモ記載、という運用を前提とする。
*   **認証方式:** Google認証を基本とする。ID/パスワード認証の実装は別途検討。
*   **マスターシート管理:** スタッフマスターの正確性はシート管理者の責任。列構成変更時の影響を考慮。
*   **拡張性:** スタイリスト向け拡張は将来的な課題とし、現時点では柔軟性のみ考慮。
*   **GAS制約:** 実行時間、API制限、同時実行数などを考慮。
*   **データ移行:** 既存データ移行はスコープ外。
*   **オフライン利用:** 不可（オンライン前提）。
*   **在庫整合性:** アプリ更新は使用数減算のみ。手動調整が必要。