# 認証機能 詳細仕様書 (01_auth_spec.txt)

## 1. 機能概要

本ドキュメントは、「美容師練習管理Webアプリ V2」におけるユーザー認証、セッション管理、および関連機能（ログアウト、管理者判定）の詳細な仕様を定義する。
利用者は自身のGoogleアカウントを使用してログインし、システムはログインユーザーを特定して、スタッフマスターの情報と紐付ける。

## 2. 関連ファイル

*   **GAS:**
    *   `src/Auth.js`: 認証関連のサーバーサイドロジックを実装。
    *   `src/code.js`: `doGet` での画面振り分け、`include` 関数。
    *   `src/Utils.js`: `isAdmin` 関数（管理者判定ロジック）。
    *   `src/DataAccess.js` (仮): スタッフマスターへのアクセス処理（`Auth.js` から利用される可能性）。
*   **HTML/JS:**
    *   `src/index.html`: アプリのメインコンテナ。認証状態に応じて表示内容を切り替える。
    *   `src/login.html` (必要なら): ログイン専用画面のテンプレート。
    *   `src/script.html`: 共通クライアントサイドJS。
    *   `src/login_script.html` (必要なら): ログイン画面固有のクライアントサイドJS。
*   **その他ドキュメント:**
    *   `docs/REQUIREMENTS.txt`: 機能要件 4.1。
    *   `docs/API_SPEC.txt`: フロント/バックエンド間のAPI仕様。

## 3. 認証方式

*   **Googleアカウント認証** を採用する (`webapp.executeAs = "USER_ACCESSING"` を利用)。
    *   ユーザーはGoogleログイン画面を経由して認証を行う。
    *   GAS側では `Session.getActiveUser().getEmail()` でユーザーのメールアドレスを取得する。
*   (将来検討) ID/パスワード認証: 本仕様書の範囲外とするが、拡張可能性は考慮する。

## 4. 画面仕様

### 4.1 未ログイン時の表示 (例: index.html または login.html)

*   **表示要素:**
    *   アプリタイトル
    *   ログインを促すメッセージ (例: 「ログインしてください」)
    *   Googleログインボタン (クリックするとGoogle認証フローを開始)
    *   メッセージ表示エリア (`id="message"`) - エラー表示用
*   **画面イメージ (テキストベース):**
    ```
    +-------------------------------------------+
    | 美容師練習管理アプリ V2                   |
    +-------------------------------------------+
    | [メッセージ表示エリア]                     |
    |                                           |
    | ログインが必要です。                      |
    | [ Googleアカウントでログイン ] (ボタン)   |
    |                                           |
    +-------------------------------------------+
    ```
*   **動作:**
    *   Googleログインボタンクリック → `google.script.run` 経由で認証URLを取得し、リダイレクトする、などの処理をクライアントサイドJSで実装。

### 4.2 ログイン後の表示 (例: index.html 内のヘッダー、メインコンテンツエリア)

*   **ヘッダー (`.site-header__inner` 内):**
    *   **ユーザー情報表示エリア (`.user-info`):**
        *   ログインユーザーの「店舗名」「名前」を表示。 (例: 「〇〇店 鈴木 一郎 さん」)
        *   管理者ユーザーの場合は、隣に「(管理者)」と表示する。
    *   **ログアウトボタン (`.btn--secondary` など):**
        *   クリックするとログアウト処理を実行。
*   **メインコンテンツエリア (`.site-main`):**
    *   練習記録画面 (`app.html` の内容) または 管理者画面 (`admin.html` の内容) が表示される (これは別仕様書で定義)。
*   **画面イメージ (ヘッダー部分):**
    ```
    +-------------------------------------------------------------------+
    | 美容師練習管理アプリ V2      [〇〇店 鈴木 一郎 さん (管理者)] [ログアウト] |
    +-------------------------------------------------------------------+
    ```

## 5. 処理フロー

### 5.1 初期アクセス (`doGet`)

1.  **ユーザー認証状態確認:**
    *   `Session.getActiveUser().getEmail()` でメールアドレスが取得できるか確認。
2.  **スタッフマスター照合:**
    *   取得したメールアドレスで `スタッフマスター` シートを検索。
    *   該当するスタッフ情報が存在するか確認。
3.  **画面振り分け:**
    *   メールアドレスが取得できない、またはスタッフマスターに該当がない場合:
        *   ログイン画面を表示 (例: `login.html` または `index.html` の未ログイン状態)。
    *   メールアドレスが取得でき、スタッフマスターに該当がある場合:
        *   該当スタッフ情報をセッション等で保持する準備。
        *   `Utils.isAdmin(email)` で管理者権限を確認。
        *   メインのアプリケーション画面 (`index.html` のログイン状態) を表示。クライアントサイドでユーザー情報を取得・表示させる。

### 5.2 ログイン処理 (クライアントサイドから `google.script.run` 経由で呼び出す)

1.  **(クライアント)** Googleログインボタンクリック。
2.  **(クライアント)** `google.script.run` でサーバーサイドの `Auth.getAuthenticationInfo()` (仮) を呼び出す。
3.  **(サーバー: Auth.getAuthenticationInfo)**
    *   `ScriptApp.getOAuthToken()` などを使って認証状態を確認 (または `doGet` へのリダイレクトを促す情報を返す)。
    *   `Session.getActiveUser().getEmail()` でメールアドレスを取得。
    *   メールアドレスをキーにスタッフマスターを検索 (`DataAccess`経由を想定)。
    *   該当スタッフ情報 (名前、店舗、役職、管理者フラグなど) と認証成功/失敗ステータスを返す。
    *   スタッフマスターに該当がない場合はエラー情報を返す。
4.  **(クライアント)** サーバーからの応答に応じて処理:
    *   成功: アプリ画面に遷移 (またはリロード) し、ヘッダー等にユーザー情報を表示。
    *   失敗: ログイン画面にエラーメッセージを表示。

### 5.3 セッションチェック (ページ読み込み時や重要操作前)

*   クライアントサイドから `google.script.run` で `Auth.checkSession()` (仮) を呼び出す。
*   サーバーサイド (`Auth.checkSession`) は `Session.getActiveUser().getEmail()` とスタッフマスター照合を行い、有効なユーザー情報 (または null) を返す。
*   クライアントサイドは結果に応じて、画面表示を維持するか、ログイン画面にリダイレクトする。

### 5.4 ログアウト処理

1.  **(クライアント)** ログアウトボタンクリック。
2.  **(クライアント)** `google.script.run` で `Auth.logout()` (仮) を呼び出す。
3.  **(サーバー: Auth.logout)**
    *   GASのセッション状態を直接破棄する方法は限定的 (`executeAs=USER_ACCESSING` の場合、ユーザーがGoogleからログアウトしない限り `Session.getActiveUser()` は情報を返し続ける可能性がある)。
    *   **対応:** GoogleアカウントからのログアウトURL (`https://accounts.google.com/logout`) をクライアントに返し、リダイレクトさせることを検討。または、アプリケーション独自のセッション情報（例: `PropertiesService`）を使っていればそれを削除する。
    *   **現実的な代替案:** ログアウトURLを返さず、単にクライアント側で「ログアウトしました」メッセージを表示し、再度ログインを促す画面（ログインボタンがある状態）に遷移させる。
4.  **(クライアント)** サーバーからの応答 (ログアウトURL or 成功/失敗) に応じて処理:
    *   URLが返ってきた場合: そのURLにリダイレクト。
    *   成功が返ってきた場合: ログイン画面を表示し、「ログアウトしました」メッセージを表示。

### 5.5 管理者判定処理

1.  **サーバーサイド:** `Auth.js` または関連ロジック内で `Utils.isAdmin(email)` を呼び出す。
2.  **クライアントサイド:** ログイン時や画面初期表示時に、サーバーから取得したユーザー情報に管理者フラグが含まれていれば、UI（ヘッダーの「(管理者)」表示や、管理者メニューへのアクセス制御）に反映させる。必要であれば、クライアントから `Auth.checkAdminStatus()` (仮) のようなAPIを呼び出して確認する。

## 6. データ仕様

### 6.1 セッション情報 (クライアントサイドで保持する想定)

*   ログイン時にサーバーから取得し、JavaScript変数や `sessionStorage` などで保持。
    *   `userName`: ログインユーザーの名前
    *   `userStore`: ログインユーザーの店舗
    *   `userRole`: ログインユーザーの役職
    *   `userEmployeeId`: ログインユーザーの社員番号
    *   `isAdmin`: 管理者かどうか (boolean)
*   **注意:** `localStorage` は永続的なのでセッションには不向き。`sessionStorage` はタブ/ウィンドウを閉じると消える。

### 6.2 スタッフマスターからの取得情報

*   `Auth.js` が `DataAccess.js` (仮) を介してスタッフマスターから取得する情報:
    *   社員番号
    *   名前
    *   Role (役職)
    *   店舗
    *   メールアドレス
    *   管理者フラグ

## 7. API仕様 (`google.script.run` 呼び出し)

*   `docs/API_SPEC.txt` に以下のAPI仕様を定義する。
    *   `Auth.getAuthenticationInfo()`: ログイン試行とユーザー情報取得。
        *   引数: なし
        *   戻り値: `{ success: boolean, userInfo: { name, store, role, employeeId, isAdmin } | null, error: string | null }`
    *   `Auth.checkSession()`: 現在のセッション状態確認。
        *   引数: なし
        *   戻り値: `{ isLoggedIn: boolean, userInfo: { name, store, role, employeeId, isAdmin } | null }`
    *   `Auth.getLogoutUrl()`: (採用する場合) GoogleログアウトURL取得。
        *   引数: なし
        *   戻り値: `{ logoutUrl: string }`
    *   (代替案) `Auth.logout()`: サーバー側でのセッションクリア処理（もしあれば）。
        *   引数: なし
        *   戻り値: `{ success: boolean }`
    *   (任意) `Auth.checkAdminStatus()`: クライアントから管理者状態を再確認する場合。
        *   引数: なし
        *   戻り値: `{ isAdmin: boolean }`

## 8. エラーハンドリング

*   **認証失敗:** Google認証自体が失敗した場合 → Google側のエラー画面が表示される。
*   **スタッフマスターに該当なし:** `Session.getActiveUser().getEmail()` で取得したメールアドレスがスタッフマスターに存在しない場合。
    *   サーバーからエラー情報を返し、クライアントはログイン画面に「登録されていないユーザーです。管理者に連絡してください。」などのメッセージを表示。
*   **権限不足:** 一般ユーザーが管理者機能にアクセスしようとした場合 → サーバー側でアクセス拒否し、クライアントにエラー情報を返す (または単に管理者メニューを表示しない)。
*   **GAS実行エラー:** サーバーサイドの処理中に予期せぬエラーが発生した場合。
    *   `try...catch` で捕捉し、`Logger.log` に詳細を出力。
    *   クライアントには汎用的なエラーメッセージ (例: 「処理中にエラーが発生しました。」) を表示 (`handleError` 関数利用)。

## 9. セキュリティ考慮事項

*   `appsscript.json` の `webapp.executeAs` が `"USER_ACCESSING"` であることを確認。
*   `oauthScopes` に `"https://www.googleapis.com/auth/userinfo.email"` が含まれていることを確認。
*   スタッフマスターへのアクセスは必要最小限の権限で行う (現状はスプレッドシート編集権限が必要)。
*   クライアントサイドでのisAdmin判定のみに頼らず、サーバーサイドでも必ず権限チェックを行う。

## 10. その他

*   本仕様書はGoogleアカウント認証を前提とする。ID/パスワード認証を実装する場合は、パスワードハッシュ化、パスワードリセット機能など、別途詳細な仕様定義が必要となる。